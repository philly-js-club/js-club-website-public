{
  "version": 3,
  "sources": ["../../../app/routes/_index.tsx"],
  "sourcesContent": ["import { json } from \"@remix-run/node\";\nimport type { V2_MetaFunction } from \"@remix-run/react\";\nimport { useLoaderData } from \"@remix-run/react\";\n\nimport { EventDetails } from \"~/components/EventDetails\";\nimport { PageGrid } from \"~/components/PageGrid\";\nimport { constructSiteTitle } from \"~/utils/common\";\n\nexport const loader = async () => {\n\t// This assumes the events are always in sorted order, newest first.\n\t// Surely this assumption on undocumented data behavior will never come back to haunt us.\n\tconst events = (await import(\"../data/events.json\")).map((event) => ({\n\t\t...event,\n\t\tdate: new Date(event.date),\n\t}));\n\n\t// This assumes we'll always have a rebuild of the site after an event finishes.\n\t// Surely this assumption tied to datetime logic will never come back to haunt us.\n\tconst now = new Date();\n\tconst oneMonthInTheFuture = new Date();\n\toneMonthInTheFuture.setUTCMonth(oneMonthInTheFuture.getUTCMonth() + 1);\n\n\treturn json(\n\t\t// Filter and sort event date in ascending order.\n\t\tevents\n\t\t\t.filter(({ date }) => date > now && date < oneMonthInTheFuture)\n\t\t\t.sort((a, b) => a.date.getTime() - b.date.getTime())\n\t);\n};\n\nexport const meta: V2_MetaFunction = () => {\n\treturn [{ title: constructSiteTitle() }];\n};\n\nexport default function Index() {\n\tconst events = useLoaderData<typeof loader>();\n\n\treturn (\n\t\t<PageGrid\n\t\t\tleft={\n\t\t\t\t<>\n\t\t\t\t\t<h2 className=\"larger\">Next Jawn{events.length === 1 ? \"\" : \"s\"}</h2>\n\t\t\t\t\t{events.map((event, index) => (\n\t\t\t\t\t\t<EventDetails\n\t\t\t\t\t\t\tdate={new Date(event.date)}\n\t\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\t\tlink={event.link}\n\t\t\t\t\t\t\tlinkText=\"Register Now\"\n\t\t\t\t\t\t\tlocation={event.location}\n\t\t\t\t\t\t\ttopics={event.topics}\n\t\t\t\t\t\t\tweight=\"medium\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t))}\n\t\t\t\t</>\n\t\t\t}\n\t\t\ttitle={\n\t\t\t\t<>\n\t\t\t\t\tPHILLY\n\t\t\t\t\t<br />\n\t\t\t\t\tJS CLUB\n\t\t\t\t</>\n\t\t\t}\n\t\t/>\n\t);\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;AAAA,kBAAqB;AAwCjB;AAVG,IAAM,OAAwB,MAAM;AAC1C,SAAO,CAAC,EAAE,OAAO,mBAAmB,EAAE,CAAC;AACxC;AAEe,SAAR,QAAyB;AAC/B,QAAM,SAAS,cAA6B;AAE5C,SACC;AAAA,IAAC;AAAA;AAAA,MACA,MACC,sFACC;AAAA,2DAAC,QAAG,WAAU,UAAS;AAAA;AAAA,UAAU,OAAO,WAAW,IAAI,KAAK;AAAA,aAA5D;AAAA;AAAA;AAAA;AAAA,eAAgE;AAAA,QAC/D,OAAO,IAAI,CAAC,OAAO,UACnB;AAAA,UAAC;AAAA;AAAA,YACA,MAAM,IAAI,KAAK,MAAM,IAAI;AAAA,YAEzB,MAAM,MAAM;AAAA,YACZ,UAAS;AAAA,YACT,UAAU,MAAM;AAAA,YAChB,QAAQ,MAAM;AAAA,YACd,QAAO;AAAA;AAAA,UALF;AAAA,UAFN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAQA,CACA;AAAA,WAZF;AAAA;AAAA;AAAA;AAAA,aAaA;AAAA,MAED,OACC,sFAAE;AAAA;AAAA,QAED,mDAAC,UAAD;AAAA;AAAA;AAAA;AAAA,eAAI;AAAA,QAAE;AAAA,WAFP;AAAA;AAAA;AAAA;AAAA,aAIA;AAAA;AAAA,IAtBF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAwBA;AAEF;",
  "names": []
}
