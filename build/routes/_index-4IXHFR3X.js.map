{
  "version": 3,
  "sources": ["../../../app/routes/_index.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/routes/_index.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/routes/_index.tsx\");\n  import.meta.hot.lastModified = \"1696908130669.0466\";\n}\n// REMIX HMR END\n\nimport { json } from \"@remix-run/node\";\nimport { useLoaderData } from \"@remix-run/react\";\nimport { EventDetails } from \"~/components/EventDetails\";\nimport { PageGrid } from \"~/components/PageGrid\";\nimport { constructSiteTitle } from \"~/utils/common\";\nexport const loader = async () => {\n  // This assumes the events are always in sorted order, newest first.\n  // Surely this assumption on undocumented data behavior will never come back to haunt us.\n  const events = (await import(\"../data/events.json\")).map(event => ({\n    ...event,\n    date: new Date(event.date)\n  }));\n\n  // This assumes we'll always have a rebuild of the site after an event finishes.\n  // Surely this assumption tied to datetime logic will never come back to haunt us.\n  const now = new Date();\n  const oneMonthInTheFuture = new Date();\n  oneMonthInTheFuture.setUTCMonth(oneMonthInTheFuture.getUTCMonth() + 1);\n  return json(\n  // Filter and sort event date in ascending order.\n  events.filter(({\n    date\n  }) => date > now && date < oneMonthInTheFuture).sort((a, b) => a.date.getTime() - b.date.getTime()));\n};\nexport const meta = () => {\n  return [{\n    title: constructSiteTitle()\n  }];\n};\nexport default function Index() {\n  _s();\n  const events = useLoaderData();\n  return <PageGrid left={<>\n\t\t\t\t\t<h2 className=\"larger\">Next Jawn{events.length === 1 ? \"\" : \"s\"}</h2>\n\t\t\t\t\t{events.map((event, index) => <EventDetails date={new Date(event.date)} key={index} link={event.link} linkText=\"Register Now\" location={event.location} topics={event.topics} weight=\"medium\" />)}\n\t\t\t\t</>} title={<>\n\t\t\t\t\tPHILLY\n\t\t\t\t\t<br />\n\t\t\t\t\tJS CLUB\n\t\t\t\t</>} />;\n}\n_s(Index, \"0qsQ0LJMbp4ZAcOenpedLepO/y4=\", false, function () {\n  return [useLoaderData];\n});\n_c = Index;\nvar _c;\n$RefreshReg$(_c, \"Index\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;AAqBA,kBAAqB;AAgCI;AApDzB,IAAI,CAAC,OAAO,gBAAgB,CAAC,OAAO,gBAAgB,CAAC,OAAO,kBAAkB;AAC5E,UAAQ,KAAK,kGAAkG;AACjH,OAAO;AACD,mBAAiB,OAAO;AACxB,mBAAiB,OAAO;AAC5B,SAAO,eAAe,CAAC,MAAM,OAAO;AAClC,WAAO,iBAAiB,SAAS,MAAM,4BAA8B,EAAE;AAAA,EACzE;AACA,SAAO,eAAe,OAAO,iBAAiB;AAChD;AANM;AACA;AAMN,IAAI,KAAK,aAAa;AAEtB,IAAI,aAAa;AACf,cAAY,MAAc;AAAA;AAAA,IAE1B;AAAA,EAAuB;AACvB,cAAY,IAAI,eAAe;AACjC;AA2BO,IAAM,OAAO,MAAM;AACxB,SAAO,CAAC;AAAA,IACN,OAAO,mBAAmB;AAAA,EAC5B,CAAC;AACH;AACe,SAAR,QAAyB;AAC9B,KAAG;AACH,QAAM,SAAS,cAAc;AAC7B,SAAO,mDAAC,YAAS,MAAM,sFACpB;AAAA,uDAAC,QAAG,WAAU,UAAS;AAAA;AAAA,MAAU,OAAO,WAAW,IAAI,KAAK;AAAA,SAA5D;AAAA;AAAA;AAAA;AAAA,WAAgE;AAAA,IAC/D,OAAO,IAAI,CAAC,OAAO,UAAU,mDAAC,gBAAa,MAAM,IAAI,KAAK,MAAM,IAAI,GAAe,MAAM,MAAM,MAAM,UAAS,gBAAe,UAAU,MAAM,UAAU,QAAQ,MAAM,QAAQ,QAAO,YAAxG,OAA/C;AAAA;AAAA;AAAA;AAAA,WAAgK,CAAE;AAAA,OAF5K;AAAA;AAAA;AAAA;AAAA,SAGrB,GAAK,OAAO,sFAAE;AAAA;AAAA,IAEb,mDAAC,UAAD;AAAA;AAAA;AAAA;AAAA,WAAI;AAAA,IAAE;AAAA,OAFK;AAAA;AAAA;AAAA;AAAA,SAIZ,KAPK;AAAA;AAAA;AAAA;AAAA,SAOA;AACT;AACA,GAAG,OAAO,gCAAgC,OAAO,WAAY;AAC3D,SAAO,CAAC,aAAa;AACvB,CAAC;AACD,KAAK;AACL,IAAI;AACJ,aAAa,IAAI,OAAO;AAExB,OAAO,eAAe;AACtB,OAAO,eAAe;",
  "names": []
}
